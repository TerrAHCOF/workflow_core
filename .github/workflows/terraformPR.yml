name: "Terraform PR Build"

on:
  workflow_call:
    inputs:
      solutionDirectory:
        required: true
        type: string
    secrets:
      gh_token:
        required: true
      client_id:
        required: true
      client_secret:
        required: true
      subscription_id:
        required: true
      tenant_id:
        required: true

jobs:
  terraform:
    name: "Terraform Build & Deploy"
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: ${{ secrets.client_id }}
      ARM_CLIENT_SECRET: ${{ secrets.client_secret }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.subscription_id }}
      ARM_TENANT_ID: ${{ secrets.tenant_id }}
    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.solutionDirectory }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate
        continue-on-error: true

      - name: Terraform Plan
        id: plan
        run: terraform plan -input=false -no-color -out tf.plan
        continue-on-error: true

      - name: Terraform Show
        id: show
        run: terraform show -no-color tf.plan 2>&1 > /tmp/plan.txt
        shell: bash

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve -input=false
        continue-on-error: true

      - name: Terraform Destroy
        id: destroy
        run: terraform destroy -auto-approve

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.gh_token }}
          script: |
            const fs = require("fs");
            const plan = fs.readFileSync("/tmp/plan.txt", "utf8");
            const maxGitHubBodyCharacters = 65536;

            function chunkSubstr(str, size) {
              const numChunks = Math.ceil(str.length / size)
              const chunks = new Array(numChunks)
              for (let i = 0, o = 0; i < numChunks; ++i, o += size) {
                chunks[i] = str.substr(o, size)
              }
              return chunks
            }

            var plans = chunkSubstr(plan, maxGitHubBodyCharacters); 
            for (let i = 0; i < plans.length; i++) {
              const output = `### Terrafrom Plan Part # ${i + 1}
              #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
              #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
              #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
              #### Terraform Apply 🤖\`${{ steps.apply.outcome }}\`
              #### Terraform Destroy 🤖\`${{ steps.destroy.outcome }}\`

              <details><summary>Show Plan</summary>

              \`\`\`\n
              ${plans[i]}
              \`\`\`

              </details>

              *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
