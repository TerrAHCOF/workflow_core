name: "Terraform PR Build"

on:
  workflow_call:
    inputs:
      solutionDirectory:
        required: true
        type: string
    secrets:
      gh_token:
        required: true
      client_id:
        required: true
      client_secret:
        required: true
      subscription_id:
        required: true
      tenant_id:
        required: true

jobs:
  terraform:
    name: "Terraform Build & Deploy"
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: ${{ secrets.client_id }}
      ARM_CLIENT_SECRET: ${{ secrets.client_secret }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.subscription_id }}
      ARM_TENANT_ID: ${{ secrets.tenant_id }}

    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.solutionDirectory }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.gh_token }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve -input=false
        continue-on-error: true

      - name: Terraform Destroy
        run: terraform destroy -auto-approve

      - name: Terraform Apply Status
        if: steps.apply.outcome == 'failure'
        run: exit 1
